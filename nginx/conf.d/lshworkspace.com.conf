resolver 127.0.0.1 ipv6=off valid=40s;

upstream docker-was {
  server lshworkspace-was:3000;
  keepalive 20;
}

# # 백엔드 upstream 설정
#   upstream myweb-api {
#       server api:8080;
#   }

# # 프론트엔드 upstream 설정
#   upstream myweb-web {
#       server front-server:3000;
#   }

server {
  listen 80;
  listen [::]:80;

  server_name lshworkspace.com www.lshworkspace.com;

	# location ^~ /.well-known/acme-challenge/ {
	# 	root /var/www/certbot;
	# }

  # location /.well-known/acme-challenge/ {
  #   allow all;

  #   root /var/www/certbot;
  # }

  location / {
    # ssl 리다이렉트
    return 301 https://$host$request_uri;
  }

  # 봇 처리
  location /robots.txt {
    return 200 "User-agent: *\nDisallow: /";
  }
}

# 인증서 오류나면 주석처리후 인증하고 다시해줘야됨 개귀찮네 ㄹㅇ;
server {
  # listen 433;
  listen 443 ssl;
  listen [::]:433 ssl;
  server_name lshworkspace.com;

  sendfile on;
  keepalive_timeout 65;


  # ssl on;

  # ssl_certificate /etc/letsencrypt/live/lshworkspace.com/fullchain.pem;
  # ssl_certificate_key /etc/letsencrypt/live/lshworkspace.com/privkey.pem;

  ssl_certificate /etc/letsencrypt/live/lshworkspace.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/lshworkspace.com/privkey.pem;

  ssl_session_timeout 60;

  # include /etc/letsencrypt/options-ssl-nginx.conf;
  # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	# include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  ssl_prefer_server_ciphers on;

  location / {
    # # 점검처리
    # # root /usr/share/nginx/build;
    # # if(-f $document_root/index.html) {
    # #   return 503;
    # # }
    # # return 503;
    # # return 301 https://$host/maintenance;

    # # 조금 화가 나지만 토 할만큼 했기때문에 점검을 그냥 때려 박도록 하겠다.
    # root /usr/share/nginx/build;
    # index index.html;
    # try_files $uri $uri/ /index.html =503;
    # # add_header Retry-After 3600 always; 놀랍게도 리엑트에서 오류를 이르킴.

 		# break;

    # root /usr/share/nginx/client;
    # index index.html index.htm;
    # try_files $uri $uri/ /index.html =503;

    # docker front-network로 프록시 패스
    # proxy_pass http://docker-was;
    # proxy_pass http://lshworkspace-was:3000;

    # root   /usr/share/nginx/html;
    # index  index.html index.htm;

    # proxy_intercept_errors on; # 백엔드 요청 가로채기

    # error_page 500 502 503 504 =503 @maintenance;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  # 점검처리
  # proxy_intercept_errors on; # 백엔드 요청 가로채기

  error_page 400 404 500 502 503 504 =503 /index.html;

  location = /maintenance {
    root /usr/share/nginx/html;

    # root /usr/share/nginx/maintenance;
    # index index.html index.htm;

    # root /usr/share/nginx/client;
    # index index.html index.htm;
    # try_files $uri $uri/ /index.html =503;

    # root   /usr/share/nginx/html;
    # index  index.html index.htm;

    # root   /usr/share/nginx/html;

    # return 503;
    # try_files $uri /index.html =503;
    # try_files $uri /* =503;

    # try_files $url /$request_uri =503;
    # rewirte ^(.*)$ /index.html;
    # add_header 'Access-Control-Allow-Origin' 'http://static.lshworkspace.com https://static.lshworkspace.com';
    # add_header 'Access-Control-Allow-Methods' 'GET, POST';

    # add_header Retry-After 3600 always;
    # internal;
    # break;
  }



#   location /robots.txt {
#     return 200 "User-agent: *\nDisallow: /";
#   }
}

log_format	sslserver	'$remote_addr - $remote_user [$time_local] "$request" '
											'$status $body_bytes_sent "$http_referer" '
											'$http_user_agent" "$http_x_forwarded_for"';

access_log  /var/log/nginx/access.log  sslserver;
